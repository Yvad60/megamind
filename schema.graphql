### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  """The unique token required to authorize a user"""
  token: String!

  """The authorized user"""
  user: User
}

type Card {
  """content on the back side of the card"""
  back: String!

  """the user that created the card"""
  creator: User

  """the id of the user created the card"""
  creatorId: Int!

  """content on the front side of the card"""
  front: String!

  """The unique ID of the card"""
  id: Int!

  """is the card public or private"""
  isPublic: Boolean!

  """the topic which the card is about"""
  topic: String!
}

type Mutation {
  """Delete an existing user by their ID """
  deleteUser(id: Int!): Boolean!

  """Authenticate a user from provided email and password"""
  login(email: String!, password: String!): AuthPayload!

  """Create a new user with provided email and password"""
  signUp(email: String!, password: String!): AuthPayload!

  """Update information of the user with provided id"""
  updateUser(email: String!, id: Int!, password: String!): User!
}

type Query {
  """Returns a list of all users in the database"""
  allUsers: [User!]!

  """Return an array of all public cards"""
  publicCards: [Card!]!
}

type User {
  """The unique email of the user"""
  email: String!

  """The unique ID of the user"""
  id: Int!

  """The password of the user"""
  password: String!
}