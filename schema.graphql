### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  """The unique token required to authorize a user"""
  token: String!

  """The authorized user"""
  user: User
}

type BadRequest implements Error {
  """The message explaining what could have gone wrong"""
  errorMessage: String!

  """The type of the error that occured"""
  errorType: String!
}

type Card {
  """content on the back side of the card"""
  back: String!

  """the user that created the card"""
  creator: User

  """the id of the user created the card"""
  creatorId: Int!

  """content on the front side of the card"""
  front: String!

  """The unique ID of the card"""
  id: Int!

  """is the card public or private"""
  isPublic: Boolean!

  """the topic which the card is about"""
  topic: String!
}

type DataNotFound implements Error {
  """The message explaining what could have gone wrong"""
  errorMessage: String!

  """The type of the error that occured"""
  errorType: String!
}

interface Error {
  """The message explaining what could have gone wrong"""
  errorMessage: String!

  """The type of the error that occured"""
  errorType: String!
}

type Mutation {
  """Create a new card from provide information"""
  createNewCard(back: String!, front: String!, isPublic: Boolean!, topic: String!): Card!

  """Delete a card from the database by its Id"""
  deleteCard(id: Int!): Boolean!

  """Delete an existing user by their ID """
  deleteUser(id: Int!): Boolean!

  """Authenticate a user from provided email and password"""
  login(email: String!, password: String!): AuthPayload!

  """Create a new user with provided email and password and names"""
  signUp(email: String!, names: String!, password: String!): AuthPayload!

  """Update an already existing card with provided information"""
  updateCard(back: String, front: String, id: Int!, isPublic: String, topic: String): Card!

  """Update information of the user with provided id"""
  updateUser(email: String, id: Int!, password: String): User!
}

type NoAccess implements Error {
  """The message explaining what could have gone wrong"""
  errorMessage: String!

  """The type of the error that occured"""
  errorType: String!
}

type NotLoggedIn implements Error {
  """The message explaining what could have gone wrong"""
  errorMessage: String!

  """The type of the error that occured"""
  errorType: String!
}

type Query {
  """Returns a list of all users in the database"""
  allUsers: [User!]!

  """Return an array of all public cards"""
  publicCards: [Card!]!

  """Return an array of cards created by specific user"""
  userOwnCards: [Query!]!
}

type User {
  """The unique email of the user"""
  email: String!

  """The unique ID of the user"""
  id: Int!
  names: String!

  """The password of the user"""
  password: String!
}